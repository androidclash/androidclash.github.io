<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://androidclash.github.io/news/article-80158.htm" />
    <title>SpringBoot的AutoConfigure自动配置原理</title>
        <meta name="description" content="将配置从代码中分离到XML或者properties中，这种spring配置外部化的方式成为外部配置。 spring 自动配置，spring-boot-autoconfigure依赖默认配置项，根据添加" />
        <meta charset="utf-8">
    <link rel="icon" href="/assets/website/img/androidclash/favicon.ico" type="image/x-icon"/>
    
    <meta name="author" content="AndroidClash官方订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://androidclash.github.io/news/article-80158.htm" />
    <meta property="og:site_name" content="AndroidClash官方订阅站" />
    <meta property="og:title" content="SpringBoot的AutoConfigure自动配置原理" />
    <meta property="og:image" content="https://androidclash.github.io/uploads/20240305/ab6e94a8acdc47fbee6a63003e586188.webp" />
        <meta property="og:release_date" content="2025-03-24T08:16:13" />
    <meta property="og:updated_time" content="2025-03-24T08:16:13" />
        <meta property="og:description" content="将配置从代码中分离到XML或者properties中，这种spring配置外部化的方式成为外部配置。 spring 自动配置，spring-boot-autoconfigure依赖默认配置项，根据添加" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot的AutoConfigure自动配置原理">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;700;800;900&display=swap" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/animate.css" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/flaticon.css" rel="stylesheet" />
    <link href="/assets/website/css/androidclash/style.css" rel="stylesheet" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-1Y3WCCGRJ2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-1Y3WCCGRJ2');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg navbar-dark ftco_navbar ftco-navbar-light site-navbar-target" id="ftco-navbar">
        <div class="container">
                        <a class="navbar-brand" href="/">Android Clash<span></span></a>
            
            <button class="navbar-toggler js-fh5co-nav-toggle fh5co-nav-toggle" type="button" data-toggle="collapse" data-target="#ftco-nav" aria-controls="ftco-nav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="oi oi-menu"></span> MENU
            </button>
            <div class="collapse navbar-collapse" id="ftco-nav">
                <ul class="navbar-nav nav ml-auto">
                	                    <li class="nav-item"><a href="/" class="nav-link"><span>首页</span></a></li>
                                        <li class="nav-item"><a href="/free-nodes/" class="nav-link"><span>免费节点</span></a></li>
                                        <li class="nav-item"><a href="/paid-subscribe/" class="nav-link"><span>推荐机场</span></a></li>
                                        <li class="nav-item"><a href="/client.htm" class="nav-link"><span>客户端</span></a></li>
                                        <li class="nav-item"><a href="/news/" class="nav-link"><span>新闻资讯</span></a></li>
                                    </ul>
            </div>
        </div>
    </nav>
    <section class="hero-wrap" style="height:350px;overflow: hidden;">
        <div class="overlay"></div>
        <div class="container-fluid px-0">
            <div class="row d-md-flex no-gutters slider-text align-items-center js-fullheight justify-content-end">
                <img class="one-third js-fullheight align-self-end order-md-last img-fluid" href="/assets/website/img/androidclash/undraw_book_lover_mkck.svg" alt="" style="opacity: 0.5;">
                <div class="one-forth d-flex align-items-center ftco-animate js-fullheight">
                    <div class="text" style="top: 30%;min-width: 70%;">
                        <h1>SpringBoot的AutoConfigure自动配置原理</h1>
                        <p>
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="ftco-about img ftco-section" id="about-section">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                	                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>将配置从代码中分离到XML或者properties中，这种spring配置外部化的方式成为外部配置。<br /> spring 自动配置，spring-boot-autoconfigure依赖默认配置项，根据添加的依赖自动加载相关的配置属性并启动依赖。应用者只需要引入对应的start jar包，spring boot 就可以自动扫描和加载依赖信息。</p> <h2>自动配置原理</h2> <h3>自动配置的前提</h3> <ul> <li> <p>@Configuration ：他是JavaConfig形式的Spring IOC容器配置，其本身是一个IOC容器配置类。与原XML形式配置原理一致。<br /> 例如：<br /> 1、 XML方式定义类</p> <pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"        default-lazy-init="true"&gt;     &lt;!--bean定义--&gt;     &lt;bean id="mockService" class="..MockServiceImpl"&gt; &lt;/bean&gt; &lt;/beans&gt;</code></pre> <p>2、 JavaConfig形式定义类</p> <pre><code>@Configuration public class MockConfiguration{     @Bean     public MockService mockService(){         return new MockServiceImpl();     } }</code></pre> </li> <li> <p>@Conditional：他是在Spring4中引入的有条件注册bean的注解，需要配合@Configuration使用。<br /> 提供以下方式：</p> <blockquote> <p>@ConditionalOnBean：当SpringIoc容器内存在指定Bean的条件<br /> @ConditionalOnClass：当SpringIoc容器内存在指定Class的条件<br /> @ConditionalOnExpression：基于SpEL表达式作为判断条件<br /> @ConditionalOnJava：基于JVM版本作为判断条件<br /> @ConditionalOnJndi：在JNDI存在时查找指定的位置<br /> @ConditionalOnMissingBean：当SpringIoc容器内不存在指定Bean的条件<br /> @ConditionalOnMissingClass：当SpringIoc容器内不存在指定Class的条件<br /> @ConditionalOnNotWebApplication：当前项目不是Web项目的条件<br /> @ConditionalOnProperty：指定的属性是否有指定的值<br /> @ConditionalOnResource：类路径是否有指定的值<br /> @ConditionalOnSingleCandidate：当指定Bean在SpringIoc容器内只有一个，或者虽然有多个但是指定首选的Bean<br /> @ConditionalOnWebApplication：当前项目是Web项目的条件</p> </blockquote> </li> <li> <p>@ComponentScan：自动扫描并加载符合条件的组件，例如通过@Bean、@Component等注解的bean，将这些类加载到Spring IOC容器中。可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围。</p> </li> </ul> <h3><span style="color:#fe2c24;">SpringBoot 的 AutoConfiguration</span></h3> <p>SpringBoot通过@EnableAutoConfiguration开启自动配置，借助SpringFactoriesLoader将所有符合自动配置条件的bean定义加载到IOC容器。</p> <ul> <li>@EnableAutoConfiguration：是一个复合Annotation,通过@Import({EnableAutoConfigurationImportSelector.class})将符合条件的Configuration配置加载到IOC容器。</li> </ul> <pre><code>   @Target({ElementType.TYPE})    @Retention(RetentionPolicy.RUNTIME)    @Documented    @Inherited    @AutoConfigurationPackage    @Import({EnableAutoConfigurationImportSelector.class})    public @interface EnableAutoConfiguration {        String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";            Class&lt;?&gt;[] exclude() default {};            String[] excludeName() default {};    }</code></pre> <ul> <li>@EnableAutoConfigurationImportSelector：继承自AutoConfigurationImportSelector类，该类实现了自动配置项默认配置的加载</li> </ul> <pre><code>``` public class AutoConfigurationImportSelector         implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware,         BeanFactoryAware, EnvironmentAware, Ordered {     //通过select加载自动配置信息     @Override     public String[] selectImports(AnnotationMetadata annotationMetadata) {         if (!isEnabled(annotationMetadata)) {             return NO_IMPORTS;         }         try {           // Step1: 得到注解信息             AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader                     .loadMetadata(this.beanClassLoader);             // Step2: 得到注解中的所有属性信息             AnnotationAttributes attributes = getAttributes(annotationMetadata);             // Step3: 得到候选配置列表             List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,                     attributes);             // Step4: 去重             configurations = removeDuplicates(configurations);             // Step5: 排序             configurations = sort(configurations, autoConfigurationMetadata);             // Step6: 根据注解中的exclude信息去除不需要的             Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);             checkExcludedClasses(configurations, exclusions);             configurations.removeAll(exclusions);             configurations = filter(configurations, autoConfigurationMetadata);             // Step7: 派发事件             fireAutoConfigurationImportEvents(configurations, exclusions);             return configurations.toArray(new String[configurations.size()]);         }         catch (IOException ex) {             throw new IllegalStateException(ex);         }     } } ```</code></pre> <p>在步骤三中加载依赖的Configurations</p> <pre><code>``` protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata,         AnnotationAttributes attributes) {     List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(             getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());     Assert.notEmpty(configurations,             "No auto configuration classes found in META-INF/spring.factories. If you "                     + "are using a custom packaging, make sure that file is correct.");     return configurations; } ```</code></pre> <ul> <li>委托SpringFactoriesLoader加载loadFactoryNames，<span style="color:#fe2c24;">META-INF/spring.factories中</span>的配置候选项。</li> </ul> <pre><code>   public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) {        String factoryClassName = factoryClass.getName();        try {            Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :                    ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));            List&lt;String&gt; result = new ArrayList&lt;String&gt;();            while (urls.hasMoreElements()) {                URL url = urls.nextElement();                Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url));                String factoryClassNames = properties.getProperty(factoryClassName);                result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));            }            return result;        }        catch (IOException ex) {            throw new IllegalArgumentException("Unable to load [" + factoryClass.getName() +                    "] factories from location [" + FACTORIES_RESOURCE_LOCATION + "]", ex);        }    }</code></pre> <ul> <li>spring-boot-autoconfigure包含的Autoconfigure</li> </ul> <pre><code>   # Auto Configure    org.springframework.boot.autoconfigure.EnableAutoConfiguration=\    org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\    org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\    org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\    org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\    org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\    org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\    org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\    ....</code></pre> <h2>AutoConfiguration自定义Starter</h2> <p>通过spring-boot-autoconfigure完成自动化配置自定义starter。starter让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。Spring Boot会自动通过classpath路径下的类发现需要的Bean，并织入bean。</p> <h3>添加META-INF/spring.factories</h3> <p><span style="color:#fe2c24;">在src/main/resources资源目录下创建META-INF/spring.factories 配置文件，在该文件中配置key和value。</span><br /><span style="color:#fe2c24;"><span style="background-color:#f9eda6;">其中key固定为：org.springframework.boot.autoconfigure.EnableAutoConfiguration</span></span></p> <h3>配置自定义Autoconfigure</h3> <p>自定义Autoconfigure文件负责设置自动加载规则和条件，只有在引用start项目中符合条件是才回自动装配。</p> <pre><code>/**  * 该配置文件需要在spring.factories中引入  * 在SpringBoot启动台的时候通过SpringFactoriesLoader会加载项目中spring.factories文件  *  * 配置自动装载器  */ @Configuration @EnableConfigurationProperties({AutoConfiguraionProperties.class}) @ConditionalOnClass({CompanyStarterService.class}) @ConditionalOnProperty(prefix="company.starter",name = "enable",havingValue = "true") public class AutoStarterConfiguration {      private AutoConfiguraionProperties properties;      public AutoStarterConfiguration(AutoConfiguraionProperties properties){         this.properties = properties;     }      @Bean     @ConditionalOnMissingBean(CompanyStarterService.class)     public CompanyStarterService companyStarterService(){         return new CompanyStarterService(this.properties);     }  }</code></pre> <h3>@ConfigurationProperties配置项映射</h3> <p>对于自动装配中需要使用的配置项，可以通过自定义@ConfigurationProperties的方式从application.yml中获取配置内容。</p> <pre><code>/**  * 自定义starter的application配置映射文件  * 可以将application.properies或者application.yml中属性映射到java类  */ @Data @ConfigurationProperties(prefix = "company.starter") public class AutoConfiguraionProperties {      private String host;      private Integer port;  }</code></pre> <h3>在Autoconfigure中通过@Bean 配置IOC容器加载类</h3> <p>通过@Bean 配置来决定哪些类可以自动装配到IOC容器，并在系统中使用</p> <pre><code>@Bean @ConditionalOnMissingBean(CompanyStarterService.class) public CompanyStarterService companyStarterService(){     return new CompanyStarterService(this.properties); }</code></pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-79473.htm">【襄阳宠物狗|襄阳宠物狗信息】（襄阳17家正规宠物医院）</a></p>
                                        <p>下一个：<a href="/news/article-80159.htm">动物疫苗可以自己打吗现在（动物疫苗可以自己打吗现在疫情）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                	<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-66861.htm" title="宠物狗粮销售招聘要求（狗粮招聘业务）">宠物狗粮销售招聘要求（狗粮招聘业务）</a></li>
                        <li class="py-2"><a href="/news/article-44810.htm" title="动物诊疗许可证的申办程序是什么（动物诊疗许可证办理流程）">动物诊疗许可证的申办程序是什么（动物诊疗许可证办理流程）</a></li>
                        <li class="py-2"><a href="/news/article-58409.htm" title="动物疫苗多少钱打一次针（动物疫苗一般多少钱）">动物疫苗多少钱打一次针（动物疫苗一般多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-72700.htm" title="成都兽医站（成都兽医站招聘）">成都兽医站（成都兽医站招聘）</a></li>
                        <li class="py-2"><a href="/news/article-50285.htm" title="Spring Boot项目配置Druid数据源(druid-spring-boot-starter)">Spring Boot项目配置Druid数据源(druid-spring-boot-starter)</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-26-free-node-subscribe-links.htm" title="1月26日 | 最新SSR/Clash/Shadowrocket/V2ray高速免费节点，最高速度22.2M/S，安卓Clash机场推荐">1月26日 | 最新SSR/Clash/Shadowrocket/V2ray高速免费节点，最高速度22.2M/S，安卓Clash机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-7-free-clash-subscribe.htm" title="2月7日 | 最新SSR/Shadowrocket/V2ray/Clash高速免费节点，最高速度18.9M/S，安卓Clash机场推荐">2月7日 | 最新SSR/Shadowrocket/V2ray/Clash高速免费节点，最高速度18.9M/S，安卓Clash机场推荐</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-19-clash-node.htm" title="2月19日 | 最新Clash/SSR/Shadowrocket/V2ray高速免费节点，最高速度18.7M/S，安卓Clash机场推荐">2月19日 | 最新Clash/SSR/Shadowrocket/V2ray高速免费节点，最高速度18.7M/S，安卓Clash机场推荐</a></li>
                        <li class="py-2"><a href="/news/article-55643.htm" title="Pytorch 加载多gpu模型+解决加载模型测试结果不正确">Pytorch 加载多gpu模型+解决加载模型测试结果不正确</a></li>
                        <li class="py-2"><a href="/news/article-38851.htm" title="如何在 C# 循环中捕获局部变量？">如何在 C# 循环中捕获局部变量？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">77</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <footer class="ftco-footer ftco-section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p>
                        <a href="/">AndroidClash官方订阅站</a> 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </footer>
    <!-- loader -->
    <div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px">
            <circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee" />
            <circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00" /></svg></div>
    <script src="/assets/website/js/frontend/androidclash/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/jquery-migrate-3.0.1.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/popper.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/jquery.easing.1.3.js"></script>
    <script src="/assets/website/js/frontend/androidclash/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/jquery.stellar.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/jquery.magnific-popup.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/jquery.animateNumber.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/scrollax.min.js"></script>
    <script src="/assets/website/js/frontend/androidclash/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>